// <auto-generated />
using System;
using ConsumirApiExterna.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConsumirApiExterna.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250104192600_UpdateRelationIdsUsuarios2")]
    partial class UpdateRelationIdsUsuarios2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConsumirApiExterna.Models.Coordinates", b =>
                {
                    b.Property<Guid>("IdCoordinates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCoordinates");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.DateOfBirth", b =>
                {
                    b.Property<Guid>("IdDateOfBirth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.HasKey("IdDateOfBirth");

                    b.HasIndex("IdUsuario");

                    b.ToTable("DateOfBirths");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Id", b =>
                {
                    b.Property<Guid>("Idid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Idid");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Ids");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Location", b =>
                {
                    b.Property<Guid>("IdLocation")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StreetIdStreet")
                        .HasColumnType("uuid");

                    b.HasKey("IdLocation");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("StreetIdStreet");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Login", b =>
                {
                    b.Property<Guid>("IdLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sha1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sha256")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdLogin");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Name", b =>
                {
                    b.Property<Guid>("IdName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdName");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Picture", b =>
                {
                    b.Property<Guid>("IdPicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("Large")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPicture");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Registered", b =>
                {
                    b.Property<Guid>("IdRegistered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.HasKey("IdRegistered");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Street", b =>
                {
                    b.Property<Guid>("IdStreet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("IdStreet");

                    b.ToTable("Street");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Timezone", b =>
                {
                    b.Property<Guid>("IdTimezone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("Offset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdTimezone");

                    b.ToTable("Timezones");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Usuario", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cell")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DobIdDateOfBirth")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Idid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationIdLocation")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LoginIdLogin")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NameIdName")
                        .HasColumnType("uuid");

                    b.Property<string>("Nat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PictureIdPicture")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegisteredIdRegistered")
                        .HasColumnType("uuid");

                    b.HasKey("IdUsuario");

                    b.HasIndex("DobIdDateOfBirth");

                    b.HasIndex("Idid");

                    b.HasIndex("LocationIdLocation");

                    b.HasIndex("LoginIdLogin");

                    b.HasIndex("NameIdName");

                    b.HasIndex("PictureIdPicture");

                    b.HasIndex("RegisteredIdRegistered");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.DateOfBirth", b =>
                {
                    b.HasOne("ConsumirApiExterna.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Id", b =>
                {
                    b.HasOne("ConsumirApiExterna.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Location", b =>
                {
                    b.HasOne("ConsumirApiExterna.Models.Coordinates", "Coordinates")
                        .WithOne()
                        .HasForeignKey("ConsumirApiExterna.Models.Location", "IdLocation")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("ConsumirApiExterna.Models.Timezone", "Timezone")
                        .WithOne()
                        .HasForeignKey("ConsumirApiExterna.Models.Location", "IdLocation")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("ConsumirApiExterna.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("ConsumirApiExterna.Models.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetIdStreet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coordinates");

                    b.Navigation("Street");

                    b.Navigation("Timezone");
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Login", b =>
                {
                    b.HasOne("ConsumirApiExterna.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Name", b =>
                {
                    b.HasOne("ConsumirApiExterna.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Picture", b =>
                {
                    b.HasOne("ConsumirApiExterna.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Registered", b =>
                {
                    b.HasOne("ConsumirApiExterna.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsumirApiExterna.Models.Usuario", b =>
                {
                    b.HasOne("ConsumirApiExterna.Models.DateOfBirth", "Dob")
                        .WithMany()
                        .HasForeignKey("DobIdDateOfBirth")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsumirApiExterna.Models.Id", "Id")
                        .WithMany()
                        .HasForeignKey("Idid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsumirApiExterna.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationIdLocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsumirApiExterna.Models.Login", "Login")
                        .WithMany()
                        .HasForeignKey("LoginIdLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsumirApiExterna.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameIdName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsumirApiExterna.Models.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureIdPicture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsumirApiExterna.Models.Registered", "Registered")
                        .WithMany()
                        .HasForeignKey("RegisteredIdRegistered")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dob");

                    b.Navigation("Id");

                    b.Navigation("Location");

                    b.Navigation("Login");

                    b.Navigation("Name");

                    b.Navigation("Picture");

                    b.Navigation("Registered");
                });
#pragma warning restore 612, 618
        }
    }
}
